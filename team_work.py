# -*- coding: utf-8 -*-
"""Team_Work.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1elaAb-zxmEt2Xjt_t-xOWml99hJT6wyY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import nltk
nltk.download('all')

data=pd.read_csv('/content/drive/My Drive/python-smartknower/Reviews.csv')
data

from nltk import word_tokenize

text=data.iloc[:,9].values
words=[]
for i in range(30):
  words.append(word_tokenize(text[i]))
words

word=word_tokenize(text[0])
word

words_no_punc=[]
for i in word:
  if i.isalpha():
    words_no_punc.append(i.lower())
words_no_punc

import wordcloud
from wordcloud import WordCloud, STOPWORDS

stopwords = set(STOPWORDS)
wordcloud = WordCloud(
                          background_color='black',
                          stopwords=stopwords,
                          max_words=200,
                          max_font_size=40, 
                          random_state=0
                         ).generate(str(text))
plt.imshow(wordcloud)
plt.axis("off")
plt.show()

a=[]
for i in range(568454):
  a.append(text[i])
a

data['Score'] = data['Score'].apply(lambda x : "positive"  if x>2  else "negative")
x=data.iloc[:,9].values
y=data.iloc[:,6].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state = 0)

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
text_model = Pipeline([('tfidf',TfidfVectorizer()),('model',MultinomialNB())])
text_model.fit(x_train, y_train)
y_pred = text_model.predict(x_test)
y_pred

y_test

text_model.predict(['worst food'])

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_pred,y_test)*100

confusion_matrix(y_pred,y_test)

print(classification_report(y_pred,y_test))

!pip install streamlit
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app-ml.py
# import streamlit as st
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.pipeline import Pipeline
# from sklearn.feature_extraction.text import TfidfVectorizer
# from sklearn.naive_bayes import MultinomialNB
# 
# def user_input():
#   review = st.text_input("Enter the review: ")
#   data = {'review':review}
#   features=pd.DataFrame(data,index=[0])
#   return features
# 
# st.title("Sentiment analysis")
# st.subheader(" Amazon fine food reviews")
# df = user_input()
# st.write(df)
# data=pd.read_csv('/content/drive/My Drive/python-smartknower/Reviews.csv')
# data['Score'] = data['Score'].apply(lambda x : "positive"  if x>2  else "negative")
# x=data.iloc[:,9].values
# y=data.iloc[:,6].values
# x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state = 0)
# text_model = Pipeline([('tfidf',TfidfVectorizer()),('model',MultinomialNB())])
# text_model.fit(x_train, y_train)
# y_pred=text_model.predict(df['review'])
# out={'sentiment':y_pred}
# output=pd.DataFrame(out,index=[0])
# st.write(output)

from pyngrok import ngrok
ngrok.connect(port='8501')

!streamlit run app-ml.py
 
